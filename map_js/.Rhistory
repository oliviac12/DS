surface <- data.table(acc.srec = 0,
price = 0,
time = 0)
sigma <- 50
epsilon <- c(-100,-50,0,50,100)
e.step <- (max(epsilon)-min(epsilon))/(2*(length(epsilon)-1))
e.probs <- c(pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[2]+e.step,0,sigma)-pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[3]+e.step,0,sigma)-pnorm(epsilon[2]+e.step,0,sigma)
,pnorm(epsilon[4]+e.step,0,sigma)-pnorm(epsilon[3]+e.step,0,sigma)
,1-pnorm(epsilon[4]+e.step,0,sigma)
)
Eps <- rep(c(-100,-50,0,50,100), N)
# Actual requirement devided by 1000, actual price
R<- c(rep(442,12), rep(596,12), rep(1707,12), rep(2071,12), rep(2360,12))
ACP <- c(rep(658,12), rep(641, 12), rep(339, 12), rep(315, 12), rep(308,12))
for t in timestep { }
for t in timestep { print t}
for t in timestep { print timestep[t]}
for (t in timestep) { print timestep[t]}
for (t in timestep) { print timestep[t]}
for (t in timestep) { timestep[t]}
t
library(foreach)
library(doParallel)
install.packages("doParallel")
library("doParallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(foreach)
library(doParallel)
library(parallel)
numCores <- detectCores()
cl <- makeCluster(numCores)
registerDoParallel(cl)
inputs <- 1:10
processInput <- function(i) {
i * i
}
processInput
processInput()
processInput(2)
processInput(for i in inputs)
processInput(inputs)
numCores
makeCluster(numCores)
results <- foreach(i=inputs) %dopar% {
processInput(i)
}
resulta
results
str(results)
library(ISLR)
names(Smarket)
?Smarket
summary(Smarket)
pairs(Smarket)
head(Smarket)
cor(Smarket[,-9])
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
install.packages("ISLR")
head(Weekly)
library(ISLR)
head(Weekly)
summary(Weekly)
paris(Weekly)
pairs(Weekly)
attach(Weekly)
logis = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Weekly,
family = binomial)
summary(logis)
glm.probs=predict(logis,type="response")
logis = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Weekly,
family = binomial)
library(ISLR)
summary(Weekly)
pairs(Weekly)
attach(Weekly)
logis = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = Weekly,
family = binomial)
summary(logis)
glm.probs=predict(logis,type="response")
glm.probs
contrasts(Direction)
glm.probs[1:10]
glm.pred=rep("Down",1089)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction)
mean(glm.pred==Direction)
1-mean(glm.pred==Direction)
print("The overall fraction of correct predictions is" + mean(glm.pred==Direction))
print(paste0("The overall fraction of correct predictions is:",mean(glm.pred==Direction))
)
print(paste0("The overall fraction of correct predictions is:",round(mean(glm.pred==Direction)), 2))
```
print(paste0("The overall fraction of correct predictions is:",round(mean(glm.pred==Direction),2))
```
print(paste0("The overall fraction of correct predictions is:",round(mean(glm.pred==Direction),2)))
```
print(paste0("The overall fraction of correct predictions is:",round(mean(glm.pred==Direction),2)))
```
print(paste0("The overall fraction of correct predictions is:",round(mean(glm.pred==Direction),2)))
table(glm.pred,Direction)
short_weekly = Weekly[year<2009, ]
short_weekly = Weekly[Year<2009, ]
head(short_weekly)
summary(short_weekly)
length(short_weekly)
shape(short_weekly)
logis.fit = glm(Direction ~ Lag2, data = train_weekly, family = binomial, subset = train)
train_weekly = Weekly[Year<2009, ]
logis.fit = glm(Direction ~ Lag2, data = train_weekly, family = binomial, subset = train)
train = (Year < 2009)
Weekly.0910 = Weekly[!train, ]
glm.fit = glm(Direction ~ Lag2, data = Weekly, family = binomial, subset = train)
glm.probs = predict(glm.fit, Weekly.0910, type = "response")
glm.pred = rep("Down", length(glm.probs))
glm.pred[glm.probs > 0.5] = "Up"
table(glm.pred, Direction.0910)
Direction.0910 = Direction[!train]
Direction[!train]
table(glm.pred, Direction.0910)
mean(glm.pred==Direction.0910)
mean(glm.pred!=Direction.0910)
print(paste0("The overall fraction of correct predictions is:",round(mean(glm.pred==Direction.0910),2)))
```
table(glm.pred, Direction.0910)
render("HW2_Chen.Rmd", "HW2")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
render("HW2_Chen.Rmd", "HW2")
library(ISLR)
summary(Auto)
mpg01 = rep(0, length(Auto$mpg))
mpg01[Auto$mpg > median(Auto$mpg)] = 1
Auto = data.frame(Auto, mpg01)
pairs(Auto)
library(ggplot2)
Auto %>%
ggplot(aes(x=mpg01, y=cylinders))+geom_plot() + ggtitle("cylinders and mpg01")
library(dplr)
library(dplyr)
Auto %>%
ggplot(aes(x=mpg01, y=cylinders))+geom_plot() + ggtitle("cylinders and mpg01")
Auto %>%
ggplot(aes(x=mpg01, y=cylinders)) + geom_plot() + ggtitle("cylinders and mpg01")
library(ggplot2)
Auto %>%
ggplot(aes(x=mpg01, y=cylinders)) + geom_plot() + ggtitle("cylinders and mpg01")
ggplot(aes(x=mpg01, y=cylinders)) + geom_plot() + ggtitle("cylinders and mpg01")
g <- ggplot(Auto, aes(mpg01, cylinders))
g+ geom_plot() + ggtitle("cylinders and mpg01")
g+ geom_boxplot() + ggtitle("cylinders and mpg01")
g <- ggplot(Auto, aes(x = cylinders, fill = mpg01))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
g <- ggplot(Auto, aes(x = cylinders, fill = as.factor(mpg01))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
g <- ggplot(Auto, aes(x = cylinders, fill = as.factor(mpg01))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
g <- ggplot(Auto, aes(x = cylinders, fill = as.factor(mpg01)))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
g <- ggplot(Auto, aes(x = cylinders, y = weight))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
level(Auto$mpg01)
head(Auto$mpg01)
g <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
par(mfrow=c(2,2))
g <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
g <- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement))
g + geom_boxplot() + ggtitle("cylinders and mpg01")
p <- qplot(displ, hwy, data = mpg)
p + facet_wrap(~ cyl)
p + facet_wrap(~ cyl, scales = "free")
g1<- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement)) + geom_boxplot() + ggtitle("displacement and mpg01") + labs(title="Plot of length per dose",x="mpg01", y = "displacement")
g2 <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders)) + geom_boxplot() + ggtitle("cylinders and mpg01") + labs(title="Plot of length per dose",x="mpg01", y = "cylinders")
multiplot(p1, p2, p3, p4, cols=2)
```
multiplot(p1, p2, cols=2)
source('~/Documents/Data Analysis/multiplot.R')
multiplot(p1, p2, cols=2)
p1<- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement)) + geom_boxplot() + ggtitle("displacement and mpg01") + labs(title="Plot of length per dose",x="mpg01", y = "displacement")
p2 <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders)) + geom_boxplot() + ggtitle("cylinders and mpg01") + labs(title="Plot of length per dose",x="mpg01", y = "cylinders")
multiplot(p1, p2, cols=2)
p1<- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement)) + geom_boxplot() + labs(x="mpg01", y = "displacement")
p2 <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders)) + geom_boxplot() + labs(x="mpg01", y = "cylinders")
p3 <- ggplot(Auto, aes(x = as.factor(mpg01), y = horsepower)) + geom_boxplot() + labs(x="mpg01", y = "horsepower")
p4 <- ggplot(Auto, aes(x = as.factor(mpg01), y = weight)) + geom_boxplot() + labs(x="mpg01", y = "weight")
multiplot(p1, p2, p3, p4, cols=2)
p1<- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement)) + geom_boxplot() + labs(x="mpg01", y = "displacement")
p2 <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders)) + geom_boxplot() + labs(x="mpg01", y = "cylinders")
p3 <- ggplot(Auto, aes(x = as.factor(mpg01), y = horsepower)) + geom_boxplot() + labs(x="mpg01", y = "horsepower")
p4 <- ggplot(Auto, aes(x = as.factor(mpg01), y = weight)) + geom_boxplot() + labs(x="mpg01", y = "weight")
p5 <- ggplot(Auto, aes(x = as.factor(mpg01), y =acceleration)) + geom_boxplot() + labs(x="mpg01", y = "acceleration")
p6 <- ggplot(Auto, aes(x = as.factor(mpg01), y =year)) + geom_boxplot() + labs(x="mpg01", y = "year")
p6 <- ggplot(Auto, aes(x = as.factor(mpg01), y =origin)) + geom_boxplot() + labs(x="mpg01", y = "origin")
multiplot(p1, p2, p3, p4, p5, p6, p7,cols=2)
p1<- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement)) + geom_boxplot() + labs(x="mpg01", y = "displacement")
p2 <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders)) + geom_boxplot() + labs(x="mpg01", y = "cylinders")
p3 <- ggplot(Auto, aes(x = as.factor(mpg01), y = horsepower)) + geom_boxplot() + labs(x="mpg01", y = "horsepower")
p4 <- ggplot(Auto, aes(x = as.factor(mpg01), y = weight)) + geom_boxplot() + labs(x="mpg01", y = "weight")
p5 <- ggplot(Auto, aes(x = as.factor(mpg01), y =acceleration)) + geom_boxplot() + labs(x="mpg01", y = "acceleration")
p6 <- ggplot(Auto, aes(x = as.factor(mpg01), y =year)) + geom_boxplot() + labs(x="mpg01", y = "year")
p7 <- ggplot(Auto, aes(x = as.factor(mpg01), y =origin)) + geom_boxplot() + labs(x="mpg01", y = "origin")
multiplot(p1, p2, p3, p4, p5, p6, p7,cols=2)
p1<- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement)) + geom_boxplot() + labs(x="mpg01", y = "displacement")
p2 <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders)) + geom_boxplot() + labs(x="mpg01", y = "cylinders")
p3 <- ggplot(Auto, aes(x = as.factor(mpg01), y = horsepower)) + geom_boxplot() + labs(x="mpg01", y = "horsepower")
p4 <- ggplot(Auto, aes(x = as.factor(mpg01), y = weight)) + geom_boxplot() + labs(x="mpg01", y = "weight")
p5 <- ggplot(Auto, aes(x = as.factor(mpg01), y =acceleration)) + geom_boxplot() + labs(x="mpg01", y = "acceleration")
multiplot(p1, p2, p3, p4, p5,cols=2)
table(Auto$year, Auto$mpg01)
counts = table(Auto$year, Auto$mpg01)
counts = as.data.frame(table(Auto$year, Auto$mpg01))
ggplot(counts, aes(year, mpg01)) +
geom_tile(aes(fill = Freq), colour = "black") +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(counts, aes(Auto$year, Auto$mpg01)) +
geom_tile(aes(fill = Freq), colour = "black") +
scale_fill_gradient(low = "white", high = "steelblue")
View(counts)
ggplot(counts, aes(Var1, Var2)) +
geom_tile(aes(fill = Freq), colour = "black") +
scale_fill_gradient(low = "white", high = "steelblue")
colnames(counts) <- c("year", "mpg01")
ggplot(counts, aes(year, mpg01)) +
geom_tile(aes(fill = Freq), colour = "black") +
scale_fill_gradient(low = "white", high = "steelblue")
counts = as.data.frame(table(Auto$year, Auto$mpg01))
colnames(counts) <- c("year", "mpg01", "Freq")
ggplot(counts, aes(year, mpg01)) +
geom_tile(aes(fill = Freq), colour = "black") +
scale_fill_gradient(low = "white", high = "steelblue")
ggpairs(Auto, colour='mpg01', alpha=0.4)
library("GGally", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggpairs(Auto, colour='mpg01', alpha=0.4)
ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01))) + geom_boxplot() +
facet_wrap(~ as.factor(origin), ncol = 5)
ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01))) +
geom_boxplot() +facet_wrap(~ as.factor(origin), ncol = 5)
ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01))) + geom_boxplot() + facet_wrap(~ as.factor(origin), ncol = 5)
```
ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01))) + geom_boxplot() + facet_wrap(~ as.factor(origin), ncol = 5)
ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01))) + geom_boxplot() +  facet_wrap(~ as.factor(Auto$origin), ncol = 5)
p = ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01)))
p + geom_boxplot() +  facet_wrap(~ as.factor(Auto$origin), ncol = 5)
p + geom_boxplot()
p + geom_boxplot() +  facet_wrap(~ origin)
P + geom_boxplot() +  facet_wrap(~ year)
p = ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01)))
P + geom_boxplot() +  facet_wrap(~ year)
p + geom_boxplot() +  facet_wrap(~ year)
pairs(Auto)
ggplot(counts, aes(mpg01, Freq, fill = year)) + geom_bar()
ggplot(counts, aes(as.factor(mpg01), Freq, fill = year)) + geom_bar()
ggplot(counts, aes(x = as.factor(mpg01), y = Freq, fill = year)) + geom_bar()
ggplot(counts, aes(x = as.factor(mpg01), fill = year)) + geom_bar(stst = "identity")
ggplot(counts, aes(x = as.factor(mpg01), fill = origin)) + geom_bar(stst = "identity")
ggplot(Auto, aes(x = as.factor(mpg01), fill = origin)) + geom_bar(stst = "identity")
ggplot(Auto, aes(x = mpg01, fill = origin)) + geom_bar(stst = "identity")
counts = as.data.frame(table(Auto$origin, Auto$mpg01))
View(counts)
ggplot(counts, aes(x = as.factor(mpg01), fill = origin)) + geom_bar(stst = "identity")
ggplot(counts, aes(x = as.factor(mpg01), y = Freq, fill = origin)) + geom_bar()
ggplot(counts, aes(x = as.factor(mpg01), y = Freq)) + geom_bar()
ggplot(counts, aes(x = mpg01, y = Freq)) + geom_bar()
Fruit <- c(rep("Apple",3),rep("Orange",5))
Bug <- c("worm","spider","spider","worm","worm","worm","worm","spider")
df <- data.frame(Fruit,Bug)
View(df)
DF <- data.frame(Auto$Origin, Auto$mpg01)
View(Auto)
Auto[10]
Auto[8,10]
Auto[8,10, ]
ggplot(Auto, aes(mpg01, ..count..)) + geom_bar(aes(fill = origin), position = "dodge")
ggplot(Auto, aes(as.factor(mpg01), ..count..)) + geom_bar(aes(fill = origin), position = "dodge")
ggplot(Auto, aes(as.factor(mpg01), ..count..)) + geom_bar(aes(fill = as.fator(origin)), position = "dodge")
ggplot(Auto, aes(as.factor(mpg01), ..count..)) + geom_bar(aes(fill = as.factor(origin)), position = "dodge")
ggplot(Auto, aes(as.factor(mpg01), ..count..)) + geom_bar(aes(fill = as.factor(name)), position = "dodge")
ggplot(Auto, aes(as.factor(mpg01), ..count..)) + geom_bar(aes(fill = as.factor(year)), position = "dodge")
Auto$origin[Auto$origin == 1] <- "American"
Auto$origin[Auto$origin == 2] <- "European"
Auto$origin[Auto$origin == 3] <- "Japanese"
ggplot(Auto, aes(as.factor(mpg01), ..count..)) + geom_bar(aes(fill = as.factor(origin)), position = "dodge")
p = ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01)))
p + geom_boxplot() +  facet_wrap(~ origin)
p + geom_boxplot() +  facet_wrap(~ year)
p1<- ggplot(Auto, aes(x = as.factor(mpg01), y = displacement)) + geom_boxplot() + labs(x="mpg01", y = "displacement")
p2 <- ggplot(Auto, aes(x = as.factor(mpg01), y = cylinders)) + geom_boxplot() + labs(x="mpg01", y = "cylinders")
p3 <- ggplot(Auto, aes(x = as.factor(mpg01), y = horsepower)) + geom_boxplot() + labs(x="mpg01", y = "horsepower")
p4 <- ggplot(Auto, aes(x = as.factor(mpg01), y = weight)) + geom_boxplot() + labs(x="mpg01", y = "weight")
p5 <- ggplot(Auto, aes(x = as.factor(mpg01), y =acceleration)) + geom_boxplot() + labs(x="mpg01", y = "acceleration")
p5 <- ggplot(Auto, aes(x = as.factor(mpg01), y =year)) + geom_boxplot() + labs(x="mpg01", y = "acceleration")
multiplot(p1, p2, p3, p4, p5,p6,cols=2)
p = ggplot(Auto, aes(x = as.factor(mpg01), y = weight, fill = as.factor(mpg01)))
p + geom_boxplot() +  facet_wrap(~ origin)
p + geom_boxplot() +  facet_wrap(~ year)
colnames(counts) <- c("year", "mpg01", "Freq")
ggplot(counts, aes(year, mpg01)) +
+ geom_tile(aes(fill = Freq), colour = "black") +
+ scale_fill_gradient(low = "white", high = "steelblue")
colnames(counts) <- c("year", "mpg01", "Freq")
ggplot(counts, aes(year, mpg01)) +
geom_tile(aes(fill = Freq), colour = "black") + scale_fill_gradient(low = "white", high = "steelblue")
counts = table(Auto$year, Auto$mpg01)
colnames(counts) <- c("year", "mpg01", "Freq")
ggplot(counts, aes(year, mpg01)) +
geom_tile(aes(fill = Freq), colour = "black") + scale_fill_gradient(low = "white", high = "steelblue")
counts = table(Auto$year, Auto$mpg01)
counts = as.data.frame(table(Auto$year, Auto$mpg01))
colnames(counts) <- c("year", "mpg01", "Freq")
ggplot(counts, aes(year, mpg01)) +
geom_tile(aes(fill = Freq), colour = "black") + scale_fill_gradient(low = "white", high = "steelblue")
library(ISLR)
?Hitters
fix(Hitters)
names(Hitters)
dim(Hitters)
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
dim(coef(ridge.mod))
library(MASS)
summary(Boston)
mean(Boston$medv)
standard_error = sd(medv)/sqrt(length(medv))
standard_error = sd(Boston$medv)/sqrt(length(Boston$medv))
sd(Boston$medv)/sqrt(length(Boston$medv))
boot.fn = function(data, index) return(mean(data[index]))
library(boot)
bstrap = boot(medv, boot.fn, 1000)
library(boot)
bstrap = boot(Boston$medv, boot.fn, 1000)
bstrap
bstrap = boot(Boston$medv, boot.fn, R =1000)
bstrap
seed(12)
set.seed(12)
bstrap = boot(Boston$medv, boot.fn, R =1000)
bstrap
t.test(Boston$medv)
boot.lower = bstrap$t0 - 2 * 0.4123
boot.upper = bstrap$t0 + 2 * 0.4123
bstrap$t0 - 2 * 0.4123
bstrap$t0 + 2 * 0.4123
median(medv)
median(Boston$medv)
boot.fn = function(data, index) return(median(data[index]))
set.seed(12)
boot(medv, boot.fn, R = 1000)
boot(Boston$medv, boot.fn, R = 1000)
quantile(Boston$medv, 0.1)
boot.fn = function(data, index) return(quantile(data[index], 0.1))
boot(medv, boot.fn, 1000)
boot(Boston$medv, boot.fn, 1000)
boot(Boston$medv, boot.fn, R =1000)
set.seed(12)
boot(Boston$medv, boot.fn, R =1000)
set.seed(155)
X = rnorm(100)
noise = rnorm(100)
beta0 = 0.5
beta1 = -1
beta2 = 3
beta3 = 8
Y = beta0 + beta1 * X + beta2 * X^2 + beta3 * X^3 + noise
library(leaps)
data.full = data.table(y = Y, x = X)
library(data.table)
data.full = data.table(y = Y, x = X)
data = data.table(y = Y, x = X)
View(data)
full = regsubsets(y ~ poly(x, 10, raw = T), data = data)
full.summary
summary(full)
full = regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10)
summary(full)
full = regsubsets(y ~ poly(x, 10, raw = T), data = data)
summary(full)$cp
mod.summary$bic
summary=summary(full)$cp
summary$bic
summary=summary(full)
summary$bic
full = regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10)
summary=summary(full)
sumamry$cp
summary$cp
summary$bic
summary$adjr2
which.min(summary$cp)
which.min(summary$bic)
which.min(summary$adjr2)
plot(summary$cp, xlab = "Subset Size", ylab = "Cp", pch = 20, type = "l")
which.max(summary$cp)
which.min(summary$cp)
full = regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10)
summary=summary(full)
which.min(summary$cp)
which.max(summary(full)$adjr2)
which.min(summary(full)$bic)
set.seed(155)
X = rnorm(100)
noise = rnorm(100)
beta0 = 0.5
beta1 = -1
beta2 = 3
beta3 = 8
Y = beta0 + beta1 * X + beta2 * X^2 + beta3 * X^3 + noise
library(leaps)
library(data.table)
data = data.table(y = Y, x = X)
full = regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10)
which.min(summary(full)$cp)
which.min(summary(full)$bic)
which.max(summary(full)$adjr2)
points(7, summary$cp[7], pch = 4, col = "red", lwd = 7)
points(7, summary(full)$cp[7], pch = 4, col = "red", lwd = 7)
summary(full)$cp
plot(summary(full)$cp, xlab = "Subset Size", ylab = "Cp", pch = 20, type = "l")
points(7, summary(full)$cp[7], pch = 4, col = "red", lwd = 7)
plot(summary(full)$bic, xlab = "Subset Size", ylab = "BIC", pch = 20, type = "l")
which.min(summary(full)$bic)
points(3, summary(full)$bic[3], pch = 4, col = "red", lwd = 7)
plot(summary(full)$adjr2, xlab = "Subset Size", ylab = "Adjusted R2", pch = 20,
which.max(summary(full)$adjr2)
which.max(summary(full)$adjr2)
plot(summary(full)$adjr2, xlab = "Subset Size", ylab = "Adjusted R2", pch = 20,
type = "l")
points(7, summary(full)$adjr2[7], pch = 4, col = "red", lwd = 7)
summary(full)$adjr2
coefficients(full, id = 3)
par(mfrow = c(1, 3))
plot(summary(full)$cp, xlab = "Subset Size", ylab = "Cp", pch = 20, type = "l")
points(7, summary(full)$cp[7], pch = 4, col = "red", lwd = 7)
plot(summary(full)$bic, xlab = "Subset Size", ylab = "BIC", pch = 20, type = "l")
points(3, summary(full)$bic[3], pch = 4, col = "red", lwd = 7)
plot(summary(full)$adjr2, xlab = "Subset Size", ylab = "Adjusted R2", pch = 20,
type = "l")
points(7, summary(full)$adjr2[7], pch = 4, col = "red", lwd = 7)
forward = regsubsets(y ~ poly(x, 10, raw = T), data = data.full, nvmax = 10,
method = "forward")
backward= regsubsets(y ~ poly(x, 10, raw = T), data = data.full, nvmax = 10,
method = "backward")
forward = regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10,
method = "forward")
backward= regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10,
method = "backward")
fwd.summary = summary(forward)
bwd.summary = summary(backward)
which.min(fwd.summary$cp)
which.min(fwd.summary$bic)
which.max(fwd.summary$adjr2)
which.min(bwd.summary$cp)
which.min(bwd.summary$bic)
which.max(bwd.summary$adjr2)
```
par(mfrow = c(3, 2))
plot(fwd.summary$cp, xlab = "Subset Size", ylab = "Forward Cp", pch = 20, type = "l")
points(3, fwd.summary$cp[3], pch = 4, col = "red", lwd = 7)
plot(bwd.summary$cp, xlab = "Subset Size", ylab = "Backward Cp", pch = 20, type = "l")
points(3, bwd.summary$cp[3], pch = 4, col = "red", lwd = 7)
plot(fwd.summary$bic, xlab = "Subset Size", ylab = "Forward BIC", pch = 20,
type = "l")
points(3, fwd.summary$bic[3], pch = 4, col = "red", lwd = 7)
plot(bwd.summary$bic, xlab = "Subset Size", ylab = "Backward BIC", pch = 20,
type = "l")
points(3, bwd.summary$bic[3], pch = 4, col = "red", lwd = 7)
plot(fwd.summary$adjr2, xlab = "Subset Size", ylab = "Forward Adjusted R2",
pch = 20, type = "l")
points(3, fwd.summary$adjr2[3], pch = 4, col = "red", lwd = 7)
par(mfrow = c(3, 2))
plot(fwd.summary$cp, xlab = "Subset Size", ylab = "Forward Cp", pch = 20, type = "l")
points(7, fwd.summary$cp[7], pch = 4, col = "red", lwd = 7)
plot(bwd.summary$cp, xlab = "Subset Size", ylab = "Backward Cp", pch = 20, type = "l")
points(7, bwd.summary$cp[3], pch = 4, col = "red", lwd = 7)
plot(fwd.summary$bic, xlab = "Subset Size", ylab = "Forward BIC", pch = 20,
type = "l")
points(3, fwd.summary$bic[3], pch = 4, col = "red", lwd = 7)
plot(bwd.summary$bic, xlab = "Subset Size", ylab = "Backward BIC", pch = 20,
type = "l")
points(3, bwd.summary$bic[3], pch = 4, col = "red", lwd = 7)
plot(fwd.summary$adjr2, xlab = "Subset Size", ylab = "Forward Adjusted R2",
pch = 20, type = "l")
points(7, fwd.summary$adjr2[7], pch = 4, col = "red", lwd = 7)
plot(bwd.summary$adjr2, xlab = "Subset Size", ylab = "Backward Adjusted R2",
pch = 20, type = "l")
points(7, bwd.summary$adjr2[4], pch = 4, col = "red", lwd = 7)
coefficients(forward, id = 3)
coefficients(full, id = 7)
coefficients(backward, id = 3)
forward = regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10,
method = "forward")
backward= regsubsets(y ~ poly(x, 10, raw = T), data = data, nvmax = 10,
method = "backward")
fwd.summary = summary(forward)
bwd.summary = summary(backward)
which.min(fwd.summary$cp)
which.min(fwd.summary$bic)
which.max(fwd.summary$adjr2)
which.min(bwd.summary$cp)
which.min(bwd.summary$bic)
which.max(bwd.summary$adjr2)
coefficients(forward, id = 3)
coefficients(backward, id = 3)
setwd("~/Dropbox/DS/map_js")
table = read.csv("LAI.csv")
hist(table$ht_rent)
